version: 2.1

aliases:
  - &checkout_fun
    checkout:
      path: ~/fun

  - &restore_node_modules
    restore_cache:
      name: Restore node_modules cache
      keys:
        - v2-front-dependencies-{{ checksum "~/fun/yarn.lock" }}
        - v2-front-dependencies-

# Define the jobs we want to run for this project
jobs:
  # ---- Git jobs ----
  # Check that the git history is clean and complies with our expectations
  lint-git:
    docker:
      - image: cimg/python:3.10
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check absence of fixup commits
          command: |
            ! git log | grep 'fixup!'
      - run:
          name: Install gitlint
          command: pip install --user requests gitlint
      - run:
          name: lint commit messages added to main
          command: ~/.local/bin/gitlint --commits origin/main..HEAD

  # Check that the CHANGELOG has been updated in the current branch
  check-changelog:
    docker:
      - image: circleci/buildpack-deps:stretch-scm
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check that the CHANGELOG has been modified in the current branch
          command: |
            git whatchanged --name-only --pretty="" origin..HEAD | grep CHANGELOG

  # Check that the CHANGELOG max line length does not exceed 80 characters
  lint-changelog:
    docker:
      - image: debian:stretch
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check CHANGELOG max line length
          command: |
            # Get the longuest line width (ignoring release links)
            test $(cat CHANGELOG.md | grep -Ev "^\[.*\]: https://github.com/openfun" | wc -L) -le 80

  # Check that renovate configuration file is valid
  check-renovate-configuration:
    docker:
      - image: renovate/renovate
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Run renovate-config-validator command
          command: renovate-config-validator

  # ---- Front-end jobs ----
  build:
    docker:
      - image: cimg/node:16.15
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/fun
    steps:
      - *checkout_fun
      - *restore_node_modules
      # If the yarn.lock file is not up-to-date with the package.json file,
      # using the --frozen-lockfile should fail.
      - run:
          name: Install front-end dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Build front-end application for production
          command: yarn build
      - persist_to_workspace:
          root: ~/fun
          paths:
            - lib/dist
      - save_cache:
          paths:
            - ./lib/node_modules
            - ./examples/playground/node_modules
            - ./examples/poll/node_modules
            - ./node_modules
          key: v2-front-dependencies-{{ checksum "yarn.lock" }}

  lint:
    docker:
      - image: cimg/node:16.15
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/fun
    steps:
      - *checkout_fun
      - *restore_node_modules
      - run:
          name: Lint code with eslint
          command: yarn lint

  test:
    docker:
      - image: cimg/node:16.15
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/fun
    steps:
      - *checkout_fun
      - *restore_node_modules
      - attach_workspace:
          at: ~/fun
      - run:
          name: Run tests
          # Circle CI needs the tests to be run sequentially, otherwise it hangs. See Jest docs below:
          # (https://jestjs.io/docs/en/troubleshooting#tests-are-extremely-slow-on-docker-and-or-continuous-integration-ci-server)
          command: yarn test --runInBand

  # Publishing to npm requires that you have defined the NPM_TOKEN secret
  # environment variables in CircleCI UI.
  publish:
    docker:
      - image: cimg/node:16.15
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/fun
    steps:
      - *checkout_fun
      - attach_workspace:
          at: ~/fun
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/fun/.npmrc
      - run:
          name: Copy project README into package
          command: cp README.md ./lib/
      - run:
          name: Publish package as public
          command: npm publish --access public ./lib/
  deployment:
    docker:
      - image: cimg/node:16.15
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/fun
    steps:
      - add_ssh_keys:
          fingerprints:
            - "cd:48:76:dd:42:15:64:18:7c:1a:31:2b:d6:ab:60:57"
      - *checkout_fun
      - *restore_node_modules
      - attach_workspace:
          at: ~/fun
      - run:
          name: build examples for production
          command: |
            for workspace in $(yarn workspaces info | grep -oP "verna-examples.*(?=\":)")
            do
              export VERNA_EXAMPLE="${workspace}"
              yarn build:example
            done
      - run:
          name: Create the deployment directory copy the git repo there & checkout the deployment branch
          command: |
            mkdir ~/deployment
            cp -R .git ~/deployment/
            cd ~/deployment
            git fetch
            git checkout pages-deployment
      - run:
          name: Clean the deployment directory & copy the build results
          command: |
            rm -rf ~/deployment/*
            for workspace_directory in $(yarn workspaces info | grep -oP "(?<=verna-examples-)(.*)(?=\":)")
            do
              mkdir -p "../deployment/${workspace_directory}"
              cd "examples/${workspace_directory}/dist"
              cp -R ./* "../../../../deployment/${workspace_directory}/"
              cd ~/fun
            done
      - run:
          name: Deploy the build artifact to Github Pages by pushing on the deployment branch
          command: |
            cd ~/deployment
            git config user.email "funmoocbot@users.noreply.github.com"
            git config user.name "FUN MOOC bot"
            git add --all
            git commit --allow-empty -m "Deploy to Github Pages"
            git push origin pages-deployment

  # ---- Internationalization jobs ----
  ## Extract translations strings from all workspaces
  i18n-extract:
    docker:
      - image: cimg/node:16.15
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/fun
    steps:
      - *checkout_fun
      - *restore_node_modules
      - run:
          name: extract translation strings
          command: yarn workspaces run i18n:extract
      - persist_to_workspace:
          root: ~/fun
          paths:
            - lib/i18n/frontend.json
            - examples/playground/i18n/frontend.json
            - examples/poll/i18n/frontend.json

  # Upload translations strings to crowdin. It requires that you have defined
  # CROWDIN_API_TOKEN, CROWDIN_PROJECT_ID, CROWDIN_BASE_PATH environment variables
  # in CircleCI project settings.
  i18n-upload:
    docker:
      - image: crowdin/cli:3.7.9
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/fun
    steps:
      - checkout
      - attach_workspace:
          at: ~/fun
      - run:
          name: upload files to crowdin
          command: crowdin upload sources -c crowdin/config.yml

# Orchestrate our job run sequence
workflows:
  verna:
    jobs:
      # ---- Front-end jobs ----
      - build:
          filters:
            tags:
              only: /.*/
      - lint:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - test:
          requires:
            - lint
          filters:
            tags:
              only: /.*/

      # ---- Internationalization ----
      - i18n-extract:
          requires:
            - build
          filters:
            branches:
              only: main
      - i18n-upload:
          requires:
              - i18n-extract
          filters:
            branches:
              only: main

      # ---- Git jobs ----
      - lint-git:
          filters:
            tags:
              only: /.*/
      - check-changelog:
          filters:
            branches:
              ignore: main
            tags:
              only: /(?!^v).*/
      - lint-changelog:
          filters:
            branches:
              ignore: main
            tags:
              only: /.*/
      - check-renovate-configuration:
          filters:
            tags:
              only: /.*/

      # ---- NPM Publication ----
      # Publish frontend package to NPM only if all build, lint and test jobs
      # succeed, and it has been tagged with a tag starting with the letter v
      - publish:
          requires:
            - test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/

      # ---- Deployment job
      - deployment:
          requires:
            - test
          filters:
            branches:
              only:
                - main
